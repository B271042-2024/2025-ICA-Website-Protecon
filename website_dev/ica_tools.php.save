<?php
session_start();
$sessionid = session_id();
$date = date("d-m-Y");

// setup PDO for mysql
$hostname = '127.0.0.1';
$database = 's2704130_IWD_ICA';
$username = 's2704130';
$password = '@DriUni11111997';

$pdo = new PDO("mysql:host=$hostname; dbname=$database; charset=utf8mb4", $username, $password);
$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);  // get error

	if (!isset($_SESSION['sequence_data'])){
		$_SESSION['sequence_data'] = [];
	}

        function displayFastaTable($fasta_sequence){
		echo '<div class="output_fasta" id="table-fasta">';
               	echo "<table>";
               	echo "<tr><th>Select</th><th>Accession No.</th><th>Sequence Name</th><th>Length</th></tr>";

		$sequences = explode(">", $fasta_sequence);

		foreach ($sequences as $sequence){
        	       if (trim($sequence) !== ""){
                 	      	$seq = explode("\n", trim($sequence), 2);
                              	$seq_header = htmlspecialchars($seq[0]);
				$seq_acc = explode(" ", $seq_header)[0];
				$seq_name = implode(" ", array_slice(explode(" ", $seq_header), 1));
                              	$seq_sequence = isset($seq[1]) ? preg_replace('/\s+/', '', trim($seq[1])) : '';
                              	$seq_length = strlen($seq_sequence);
				$_SESSION['sequence_data'][] = ['acc' => $seq_acc, 'name' => $seq_name, 'length' => $seq_length, 'sequence' => ">$seq_header\n$seq_sequence"];

				echo "<tr><td><input type='checkbox' class='delete-checkbox checkie' data-sequence-id='$seq_acc' name='del[]' value='$seq_acc'></td><td>$seq_acc</td><td>$seq_name</td><td>$seq_length</td></tr>";

                        }
		}
                echo "</table>";
		echo "</div>";
		echo "<br>";
		echo "<form method='POST' action=''>";
		echo '<div id="button-fasta1" style="text-align: left;">';
			echo "<button type='button' id='delete-button' onclick='deleteSelectedRows(event)'>Remove</button>";
		echo "</div>";

		echo '<div id="button-fasta2" style="text-align: right;">';
			echo "<button type='submit' id='button4' onclick=proceedTool(event)>Proceed</button>";
		echo "</div>";
		echo "</form>";

	} //end fxn

	// to match with the visualized data in the table, only transfer data that are not deleted to mysql
	if (isset($_POST['delete_ids'])){		// receive from JS AJAX as delete_ids
		$deleted_ids = explode(',', $_POST['delete_ids']);
		$_SESSION['sequence_data'] = array_filter($_SESSION['sequence_data'], function($seq) use ($deleted_ids) {
			return !in_array($seq['acc'], $deleted_ids);		// remove rows with the accession no.
		});
		$_SESSION['sequence_data'] = array_values($_SESSION['sequence_data']);
		echo "They are deleted.";
	}


	if (isset($_POST['button_proceed'])){
		echo "<br>";
		echo "<p><i>SCROLL BELOW. REFRESH PAGE TO RE-DO THIS SECTION...</i></p>";
               	echo "<hr>";
		echo "<br>";
		echo "<p><b>Please select tools to run your sequence analysis below:</b></p>";
                foreach ($_SESSION['sequence_data'] as $seq) {
                        transfertoSQL($pdo, $sessionid, $seq['acc'], $seq['name'], $seq['length'], $seq['sequence']);
                }
 		echo "<div class='table_tools'>";
			echo "<table>";
				echo "<tr><th>Tools</th><th>Description</th><th>Select</th></tr>";
				echo "<tr><td>ClustalO</td><td>For protein alignment</td><td><input type='checkbox' class='select-tools' name='selecttools[]' value='ClustalO'></td></tr>";
				echo "<tr><td>EMBOSS: patmatmotifs</td><td>Use PROSITE database to search for motifs</td><td><input type='checkbox' class='select-tools' name='selecttools[]' value='patmatmotifs'></td></tr>";
				echo "<tr><td>EMBOSS: plotcon</td><td>To generate protein conservation plot</td><td><input type='checkbox' class='select-tools' name='selecttools[]' value='plotcon'></td></tr>";
				echo "<tr><td>NGL Viewer</td><td>To view 3D protein conservation</td><td><input type='checkbox' class='select-tools' name='selecttools[]' value='ngl'></td></tr>";
			echo "</table>";
		echo "</div>";
		echo "<form method='POST' action=''>";
			echo '<div id="button-run" style="text-align: right;">';
				echo "<button type='button' id='button5' onclick='runAnalysis(event)'>Run</button>";
			echo "</div>";
		echo "</form>";
		exit;	// stop page from showing content-main

        }

	function transfertoSQL($pdo, $sessionid, $seq_acc, $seq_name, $seq_length, $fasta_sequence){
		try{
			$webtosql = "insert into temporary_data (session_id, accession_no, sequence_name, length, fasta_sequence) values (:session_id, :accession_no, :sequence_name, :length, :fasta_sequence)";
			$stmt = $pdo->prepare($webtosql);
    			$stmt->bindParam(':session_id', $sessionid, PDO::PARAM_STR);
    			$stmt->bindParam(':accession_no', $seq_acc, PDO::PARAM_STR);
	    		$stmt->bindParam(':sequence_name', $seq_name, PDO::PARAM_STR);
			$stmt->bindParam(':length', $seq_length, PDO::PARAM_INT);
			$stmt->bindParam(':fasta_sequence', $fasta_sequence, PDO::PARAM_STR);
			$stmt-> execute();
			error_log("Data successfully transferred to MYSQL");
		} catch (PDOException $e){
			error_log("Error transferring data to MYSQL: " . $e->getMessage());
		}
	}


        function fromysql_todelete($pdo, $sessionid){
		try{
				$delete_sql = "DELETE FROM temporary_data WHERE session_id = :sessionid";
				$delete_stmt = $pdo->prepare($delete_sql);
				$delete_stmt->bindParam(':sessionid', $sessionid, PDO::PARAM_STR);
				$delete_stmt->execute();
				error_log("Rows deleted where session_id = " . $sessionid);
			return true;
		} catch (PDOException $e){
			error_log("Error deleting from MYSQL: ". $e->getMessage());
			return false;
		}
	}



	function fromysql($pdo, $sessionid){

		try{
			$sqltoweb = "select * from temporary_data where session_id = :sessionid";
			$stmt = $pdo->prepare($sqltoweb);
			$stmt->bindParam(':sessionid', $sessionid, PDO::PARAM_STR);
			$stmt->execute();

			$sql_fasta = [];
			while ($row = $stmt->fetch(PDO::FETCH_ASSOC)){
				$sql_fasta[] = $row['fasta_sequence'];
			}
			error_log("FASTA sequences: " . json_encode($sql_fasta));
			return $sql_fasta;
		} catch (PDOException $e){
			error_log("Error fetching from MYSQL: " . $e->getMessage());
			return [];
		}
	}

        function transferDataPermanent($sessionid, $pdo, $username, $date){
                //transfer data to the permanent table
                try{
			echo "<p>function transferdatapermanent</p>";
			//fetch data from table temporary_data
                        $sqltoweb = "select * from temporary_data where session_id = :sessionid";
                        $stmt = $pdo->prepare($sqltoweb);
                        $stmt->bindParam(':sessionid', $sessionid, PDO::PARAM_STR);
                        $stmt->execute();

			$sql_accessionno = [];
			$sql_sequencename = [];
			$sql_length = [];
			$sql_fasta = [];

                        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)){
                                $sql_fasta[] = $row['fasta_sequence'];
                        	$sql_accessionno[] = $row['accession_no'] ;
                        	$sql_sequencename[] = $row['sequence_name'];
                        	$sql_length[] = $row['length'];
                        }

			//from table temporary_data to protein_sequences
			$webtosql1 = "insert into protein_sequences (session_id, accession_no, sequence_name, length, fasta_sequence) values (:sessionid, :accession_no, :sequence_name, :length, :fasta_sequence)";
			$stmtInsert = $pdo->prepare($webtosql1);
        		for ($i = 0; $i < count($sql_fasta); $i++) {
            			$stmtInsert->bindParam(':sessionid', $sessionid, PDO::PARAM_STR);
            			$stmtInsert->bindParam(':accession_no', $sql_accessionno[$i], PDO::PARAM_STR);
            			$stmtInsert->bindParam(':sequence_name', $sql_sequencename[$i], PDO::PARAM_STR);
            			$stmtInsert->bindParam(':length', $sql_length[$i], PDO::PARAM_INT);
            			$stmtInsert->bindParam(':fasta_sequence', $sql_fasta[$i], PDO::PARAM_STR);
            			$stmtInsert->execute();
        		}

			//from table temporary_data to session_details
			$webtosql2 = "insert into session_details (user_id, session_id, timestamp) values (:userid, :sessionid, :timestamp)";
			$stmtInsert2 = $pdo->prepare($webtosql2);
                        $stmtInsert2->bindParam(':userid', $username, PDO::PARAM_STR);
                        $stmtInsert2->bindParam(':sessionid', $sessionid, PDO::PARAM_STR);
                        $stmtInsert2->bindParam(':timestamp', $date, PDO::PARAM_STR);
			$stmtInsert2->execute();

                } catch (PDOException $e){
                        error_log("Error from MYSQL: " . $e->getMessage());
			echo "<p>Error transferring data. Please try again later.</p>";
			return [];
                }
        }


        function removeDatafromPermanentmysql(){}
                //remove data from permanent table


	function clustalo($sql_fasta, $sessionid){
		if (!empty($sql_fasta)){
			echo "<br>";
			echo "<hr>";
			echo "<br>";

			$input_seq = "./tmp/" . $sessionid . "_seq.fasta";
			$fasta_content = implode("\n", $sql_fasta);
			$createfile = fopen($input_seq, 'w');
			if($createfile){
				fwrite($createfile, $fasta_content);
				fclose($createfile);
			} else{
				echo "Error opening the file";
				return;
			};

			$output_clustalo = "./tmp/" . $sessionid . "_clustalo.aln";
                        echo "<p><b>ClustalO output:</b></p>";
			$run_clustalo = shell_exec("clustalo -i $input_seq -o $output_clustalo");

			//download button
			echo "<div class=button_download>";
				echo '<button onclick="downloadFile(\'' . basename($input_seq) . '\', event)">Download .fasta</button>';
				echo '<button onclick="downloadFile(\'' . basename($output_clustalo) . '\', event)">Download .aln</button>';
			echo "</div>";
			echo "<br>";

			//display clustalo output on website
			echo "<div class = 'display_clustalo'>";
			echo "<table class='table_aln'>";
			echo "<tr><th style='width: 200px' class='clustalo_header'>Name</th><th class='clustalo_seq'>Overview of alignment</th></tr>";

			$output_contents = file_get_contents($output_clustalo);
			$lines = explode("\n", $output_contents);
			$seq_header = "";
			$seq_sequence = "";
			foreach ($lines as $line){
				if (strpos($line, '>') === 0){
					if (!empty($seq_header)){
						echo "<tr><td style='width: 200px' class='clustalo_header'>$seq_header</td><td class='clustalo_seq'>$seq_sequence</td></tr>";
					}
					$seq_header = htmlspecialchars($line);
					$seq_sequence = "";
				} else{
						$seq_sequence .= trim($line);
				}
			}
			if (!empty($seq_header)){
				echo "<tr><td class='clustalo_header'>$seq_header</td><td class='clustalo_seq'>$seq_sequence</td></tr>";
			}
			echo "</table>";
			echo "</div>";
			return [$input_seq, $output_clustalo];

		}else{
			echo "<p>No sequence in the input FASTA file.</p>";
		}
	}

	function patmatmotifs($sql_fasta, $sessionid){
		if (!empty($sql_fasta)){
			//if file not exist, then create
			$input_seq = "./tmp/" . $sessionid . "_seq.fasta";
			if(!file_exists($input_seq)){
                        	$fasta_content = implode("\n", $sql_fasta);
                        	$createfile = fopen($input_seq, 'w');
                        	if($createfile){
                                	fwrite($createfile, $fasta_content);
                                	fclose($createfile);
                        	} else{
                                	echo "<p>Error opening the file</p>";
                                	return;
                        	};
			}

			$output_patmatmotifs = "./tmp/" . $sessionid . "_patmatmotifs.txt";
			echo "<br>";
			echo "<p><b>EMBOSS patmatmotifs output:</b></p>";
                        echo "<div class=button_download>";
                                echo '<button onclick="downloadFile(\'' . basename($output_patmatmotifs) . '\', event)">Download motifs</button>';
                        echo "</div>";

			$run_motif = shell_exec("patmatmotifs -full -sequence $input_seq -outfile $output_patmatmotifs");
			echo "<pre>$run_motif</pre>";
			$output_contents = file_get_contents($output_patmatmotifs);
			echo "<pre>" . ($output_contents) . "</pre>";
		}
	}

	function plotcon($sql_fasta, $sessionid){
                if (!empty($sql_fasta)){
			$output_clustalo = "./tmp/" . $sessionid . "_clustalo.aln";
			if(!file_exists($output_clustalo)){
				clustalo($sql_fasta, $sessionid);
			}

			shell_exec("/usr/bin/plotcon -sequences $output_clustalo -winsize 4 -graph png");
			$output_plotcon_png = "./tmp/plotcon.1.png";

			//download button
                        echo "<p><b>EMBOSS plotcon output:</b></p>";
                        echo "<div class=button_download>";
                                echo '<button onclick="downloadFile(\'' . basename($output_plotcon_png) . '\', event)">Download .png</button>';
                        echo "</div>";
			echo '<br>';

                        //display content on the website
			echo "<div class=display_plotcon>";
				echo "<img src='{$output_plotcon_png}'>";
			echo "</div>";
                }else{
                        echo "<p>No sequence in the input FASTA file.</p>";
                }
        }


	function nglviewer(){}


	if (isset($_POST['button_run'])){
		$sql_fasta = fromysql($pdo, $sessionid);
		$tools = json_decode($_POST['tools'], true);
		$result = '';

		foreach ($tools as $tool){
			if ($tool === 'ClustalO'){
				$output = clustalo($sql_fasta, $sessionid);
			} elseif ($tool === 'patmatmotifs'){
				$output = patmatmotifs($sql_fasta, $sessionid);
			} elseif ($tool === 'plotcon'){
				$output = plotcon($sql_fasta, $sessionid);
			} else{
				echo "ngl";
			}

			if (is_array($output)){
				$output = implode("\n", $output);
			}

			$result .= $output;
		}

		echo $result;	//send result back to JS

		echo "<br>";
		//put the details whether to save session
		echo '<form action="" method="post">';
			echo '<div id="session">';
				echo '<br>';
				echo '<hr>';
				echo '<br>';
				echo '<p><br>To save your session, please fill in your username and press Save.</b></p>';
				echo '<div class="save_session">';
					echo '<label>Username:</label>';
					echo '<input type="text" name="input_username" placeholder="Any random unique name"/>';
				echo '</div>';
				echo "<p>Your Session ID: $sessionid</p>";
				echo '<div class="button_session">';
					echo '<button id="submit_id" name="submit_id" type="submit">Save</button>';
					echo '<button id="cancel" name="cancel" type=submit>Cancel</button>';
				echo '</div>';
			echo '</div>';
		echo '</form>';
		exit;
	}

//	function transferDataPermanent($sessionid, $pdo){
		//transfer data to the permanent table


//	}


//	function removeDatafromPermanentmysql(){}
//		//remove data from permanent table


	if (isset($_POST['submit_id'])){
		if (!empty($_POST['input_username'])){
			//get input
			$username = $_POST['input_username'];
			echo "<p>Your session has been saved. To retrieve your session, please enter the information below.</p>";
			echo "<p>Username: $username; Session ID: $sessionid</p>";

			//transfer info to the 2 tables from temporary_data
			transferDataPermanent($sessionid, $pdo, $username, $date);

			//delete temporary table
			//fromysql_todelete($pdo, $sessionid);

		} else{
			echo "<p>To save information, username is required.</p>";
			echo '<form action="" method="post">';
				echo '<button id="cancel" name="cancel" type=submit>Cancel</button>';
			echo '</form>';
		}
	}


	if (isset($_POST['cancel'])){
		fromysql_todelete($pdo, $sessionid);
		echo "<p>Session has been cleared.</p>";
	}

?>

<?php

echo <<<_HEAD
<!DOCTYPE html>
<html lang="en">
<head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>PROTE-Con</title>
        <link rel="stylesheet" href="https://bioinfmsc8.bio.ed.ac.uk/~s2704130/S2_IWD/ICA_Website_250318/website_dev/ica_style.css">

	<style>

		/* General styling */
                .input_group, legend, label, span {
                        font: 16px Arial, sans-serif;
                }

		input[type="text"], input[type="number"] {
    			padding: 8px;
    			margin: 5px 10px 5px 0; /* Space on the right side */
    			width: 100px; /* Set fixed width for inputs */
    			box-sizing: border-box;
		}

		input[type="checkbox"] {
    			margin-right: 5px;
		}

		label {
    			font-weight: bold;
    			width: auto;
		}

		span {
			width: auto;
		}

		/* Styling the div container */
		.input_group, legend {
			font: 18px Arial, sans-serif;
		}

		.methods {
    			display: flex;
    			flex-direction: column;
    			gap: 20px;
		}

		/* Aligning Method 1 and Method 2 with spacing */
		fieldset {
    			border: 1px solid #D3D3D3;
    			padding: 15px;
    			border-radius: 5px;
    			display: block;
    			width: 95%;
		}

		legend {
    			font-weight: bold;
    			padding: 0 10px;
		}

		.input_checkbox {
    			margin-top: 10px;
		}

		.only_checkbox {
    			display: flex;
    			flex-direction: column;
    			gap: 8px;
		}

		.only_checkbox input[type="checkbox"] {
			transform: scale(1.5);
			margin-right: 15px;
		}

		.input_row {
    			display: flex;
    			align-items: center;
    			margin-bottom: 10px;
		}

		.input_row label {
    			width: 200px;
		}

		.input_row input {
    			width: 500px;
		}

		.input_row span {
			margin-left: 15px;
		}

		button {
			padding: 8px 20px;
			background-color: #0000FF;
			font-weight: bold;
			color: white;
			border-radius: 5px;
			border: none;
			cursor: pointer;
			font-size: 16px;
		}

		button:hover {
			background-color: gray;
		}

		.output_fasta {
			border: 1px solid white;
			padding: 15px;
			border-radius: 5px;
			display: block;
			width: 95%;
			height: 300px;
			text-align: left;
			overflow: auto;
			font: 16px Arial, sans-serif;
		}

		table {
			width: 1100px;
			border-collapse: collapse;
		}

		table th, table td {
			padding: 10px;
			border: 1px solid #D3D3D3;
		}

		table th {
			background-color: black;
			color: white;
		}

		.table_tools {
                        border: 1px solid white;
                        padding: 15px;
                        border-radius: 5px;
                        display: block;
                        width: 95%;
                        text-align: left;
                        overflow: auto;
                        font: 16px Arial, sans-serif;
		}

		.display_clustalo {
                        border: 1px solid #D3D3D3;
                        padding: 5px;
                        border-radius: 5px;
                        display: block;
                        width: 95%;
                        text-align: left;
                        overflow: auto;
			font: 16px Arial, sans-serif;
		}

		.table_aln {
			border: none;
		}

		.table_aln th:first-child, .table_aln td:first-child {
    			width: 400px;
    			white-space: nowrap;
			font-size: 12px;
		}

		.table_aln th:nth-child(2), .table_aln td:nth-child(2) {
			white-space: nowrap;
		}

		.display_plotcon {
                        border: 1px solid #D3D3D3;
                        padding: 5px;
                        border-radius: 5px;
                        display: block;
                        width: 800px;
                        overflow: auto;
		}

		.button_download, .button_session, .save_session{
 		       	display: flex;
        		gap: 20px;
        		align-items: center;
		}

		input[name="input_username"] {
			padding: 5px;
			width: 200px;
		}

	</style>
</head>
<body>
_HEAD;

echo <<<_TOOL1_FASTA
<!-- 1 EXTRACT INFORMATION FROM NCBI PROTEIN BEGINS -->
<!-- input1 begins -->

	<form method="POST" action="ica_tools.php">
		<br>
		<div class="methods" id="content-main">
		<h1><b>Get your Sequences</b></h1>
			<fieldset>
				<legend>Method 1: Use your saved Job ID</legend>
                        	<div class="input_row">
					<label for="input0"><b>Job ID:</b></label>
                        		<input type="text" id="input0" name="input0" placeholder="Enter job ID">
                        		<span>e.g. 1234567890abcdef</span>
				</div>
                                <br>
                                        <button type="submit" name="button0">Submit</button>
			</fieldset>

			<p>OR</p>

			<fieldset>
				<legend>Method 2: Retrieve sequences from NCBI Protein</legend>
				<div class="input_row">
					<label for="input1"><b>Protein Name:</b></label>
					<input type="text" id="input1" name="input1" placeholder="Enter protein name">
					<span>e.g. Glucose-6-Phosphatase</span>
				</div>
				<div class="input_row">
                			<label for="input2"><b>Taxonomy Group:</b></label>
                			<input type="text" id="input2" name="input2" placeholder="Enter taxonomic group">
                			<span>e.g. Aves</span>
				</div>
				<br>
				<div class="input_checkbox">
					<p><b>Tick below to exclude:</b></p>
					<div class="only_checkbox">
    						<label><input type="checkbox" name="options[]" value="isoform">isoform</label>
    						<label><input type="checkbox" name="options[]" value="partial">partial</label>
					</div>
				</div>
				<br>
				<div class="input_row">
					<label for="input3"><b>No. of sequences:</b></label>
					<input type="number" id="input3" name="input3" placeholder="Default: 20, Max: 200" max="200">
					<span>Leave blank to use default</span>
				</div>
				<br>
					<button type="submit" name="button1">Submit</button>
			</fieldset>
		</div>
		<br>
	</form>
<!-- input1 ends -->
_TOOL1_FASTA;



// <!-- output1 starts -->

	//Tool 0: Extract Job ID from sql



	// Tool 1: Extract details from NCBI protein
	//if button
	if (isset($_POST['button1'])){

		//delete data from mysql each time user key in new entry at each session. It will only be saved once the user click save.
		fromysql_todelete($pdo, $sessionid);

		echo "<div id=output-seqdetails>";
		// extract input1-3
               	$protein_name = trim($_POST['input1']);
               	$taxon_group = trim($_POST['input2']);
		$num_sequence = isset($_POST['input3']) && !empty($_POST['input3']) ? (int)$_POST['input3'] : 20;	// default: 20
               	$ncbi_token = "abb4f7cff84a4af777891b6f35184e703808";
		echo "<p><b>Protein Name:</b> $protein_name</p>";
		echo "<p><b>Taxonomy Group:</b> $taxon_group</p>";

		$ncbi_search = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=protein&term=" . urlencode($protein_name) . "+AND+" . urlencode($taxon_group);
		//if >1 tick
		if (!empty($_POST['options'])){
			$encode_options = array_map('urlencode', $_POST['options']);
			$filter = implode("+NOT+", $encode_options);
			$ncbi_search .= "+NOT+" . $filter;
		}
		$ncbi_search .= "&retmax=$num_sequence&retmode=json&api_key=$ncbi_token";


		// NCBI SEARCH
		$o_search = file_get_contents($ncbi_search);
//		echo "$ncbi_search";
               	if($o_search === false){
                       	echo "<p>Error. Unable to connect to NCBI API.</p>";
                       	return;
               	}

               	$o_data = json_decode($o_search, true);
               	$o_idlist = $o_data['esearchresult']['idlist'] ?? [];   // if null, assign an empty array

               	if(empty($o_idlist)){
                       	echo "<p>ERROR. No matching protein found.";
                       	return;
               	}

		$id_string = implode(", ", $o_idlist);
		$id_count = count($o_idlist);
		echo "<p>Total sequences found: <b>$id_count</b>";
//               	echo "<p>Accession ID: $id_string</p>";

		$fasta_sequence = '';
		$batches = array_chunk($o_idlist, 10);
		foreach ($batches as $batch){
			$ids = implode(',', $batch);  // Convert the batch to a comma-separated string of IDs
          		$ncbi_fetch = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=protein&id=$ids&retmode=text&rettype=fasta&api_key=$ncbi_token";

            		// Fetch the FASTA sequence for the batch
          		$batch_fasta = file_get_contents($ncbi_fetch);
			$fasta_sequence .= $batch_fasta;

		}
		echo "</div>";
		displayFastaTable($fasta_sequence);

	}

echo <<<_TAIL

	<script type="text/javascript" src="https://bioinfmsc8.bio.ed.ac.uk/~s2704130/S2_IWD/ICA_Website_250318/website_dev/ica_script.js"></script>
</body>
<!-- user can save and come back to the page, cookies, ensure that can't be hacked (JS) -->
</html>
_TAIL;

?>
